- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - SQL99语法 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
#一、内连接
 /*
语法：
SELECT 查询列表
FROM 表名1 别名1
【INNER】JOIN 表名2 别名2 ON 连接条件
【INNER】JOIN 表名3 别名3 ON 连接条件
...
【WHERE】筛选条件
【GRUOP BY】
【HAVING】
【ORDER BY】

执行顺序：
from
join 
join
where
group by
having
select
order by

【INNER】表示内连接 普通等值连接可加可不加

SQL92 和 SQL99的区别：
SQL99，使用JOIN关键字代替了之前的逗号，并且将连接条件和筛选条件进行了分离，提高了阅读性！
*/
#一）等值连接
#①简单连接
#案例：查询员工名和部门名
 SELECT
  last_name,
  department_name
FROM
  employees e
  JOIN departments d
    ON e.`department_id` = d.`department_id`;

#②添加筛选条件
#案例：查询部门编号大于100的部门名和所在的城市名
SELECT department_id,department_name,city
FROM departments d
JOIN locations l
ON d.location_id=l.location_id
WHERE d.`department_id`>100;

#③添加分组+筛选
#案例：查询每个城市的部门个数
SELECT COUNT(*),city
FROM departments d
INNER JOIN locations l
ON d.`location_id`=l.`location_id`
GROUP BY d.location_id;

#④添加分组+筛选+排序
#案例：查询部门中员工个数＞10的部门名，并按部门名降序
SELECT department_name,COUNT(*) AS "员工个数"
FROM employees e
JOIN departments d
ON e.`department_id`=d.`department_id`
GROUP BY e.`department_id`
HAVING 员工个数>10
ORDER BY d.`department_name` DESC;

#二）非等值连接
#案例：查询部门编号在10-90之间的员工的工资级别，并按级别进行分组
SELECT salary,grade_level
FROM employees e
JOIN job_grades j
ON e.`salary` BETWEEN j.`lowest_sal` AND j.`highest_sal`
WHERE e.`department_id` BETWEEN 10 AND 99
GROUP BY j.`grade_level`;

#三）自连接
#案例：查询员工名和对应的领导名
SELECT e.last_name 员工名,m.last_name 领导名
FROM employees e
INNER JOIN employees m
ON e.`manager_id`=m.`employee_id`;

#二、外连接（只存在SQL99语法中）
/*
说明：查询结果中为主表中所有的记录，如果从表有匹配，则显示匹配项；如果从表没有匹配项，则显示null
应用场景：一般用于查询主表中有，但从表中没有的记录

特点：
1、外连接分主从表，两表的顺序不能任意调换
2、左连接的话，left join左边为主表
   右连接的话，right join右边为主表
   左连接和右连接一定意义上是可以相互转化的
   
语法：
select 查询列表
from 表1 别名
left|right|full 【outer】 join 表2 别名 on连接条件
where 筛选条件;

*/
#一）左外连接
#案例1：查询所有女神记录，以及对应的男神名，如果没有对应的男神，则显示为null
SELECT g.*,b.boyName
FROM beauty g
LEFT JOIN boys b ON g.`boyfriend_id`=b.`id`;

#案例2：查询哪个女神没有男盆友
SELECT g.*,b.boyName
FROM beauty g
LEFT JOIN boys b ON g.`boyfriend_id`=b.`id`
WHERE b.`boyName` IS NULL;

#案例3：查询哪个部门没有员工，并显示其部门编号和部门名
USE myemployees;
SELECT USER();

SELECT e.*,d.*
FROM employees e
RIGHT JOIN departments d ON e.`department_id`=d.`department_id`
WHERE e.`employee_id` IS NULL;
#如果不会，则先连接，再考虑筛选条件

#二）右外连接
#案例1：查询所有女神记录，以及对应的男神名，如果没有对应的男神，则显示为null
SELECT g.*,b.boyName
FROM boys b
RIGHT JOIN beauty g ON g.`boyfriend_id`=b.`id`;

#三）全外连接

#练习1：查询编号>3的女神的男盆友信息，如果有则列出详细，如果没有，用null填充
USE girls;
SELECT g.*,b.*
FROM beauty g
LEFT JOIN boys b
ON g.`boyfriend_id`=b.`id`
WHERE g.`id`>3;

#练习2：查询哪个城市没有部门
USE myemployees;
SELECT city,department_id
FROM locations l
LEFT JOIN departments d ON l.`location_id`=d.`location_id`
WHERE d.`department_id`IS NULL;

#练习3：查询部门名为SAL或IT的员工信息
SELECT d.`department_name`,e.*
FROM employees e
LEFT JOIN departments d ON e.`department_id`=d.`department_id`
WHERE d.`department_name`IN("SAL","IT");
