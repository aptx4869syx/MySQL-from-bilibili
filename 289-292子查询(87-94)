#子查询
/*
说明：当一个查询语句中又嵌套了拎一个完整的select语句，
      则被嵌套的select语句称为子查询或内查询，
      外面的select语句称为主查询或外查询。
#子查询不一定必须出现在select语句内部，只是出现在select语句内部的时候较多！

分类：
1、select后面：
         要求：子查询的结果为单行单列（标量子查询）
2、from后面：
         要求：子查询的结果可以为多行多列
3、where或having后面：重点
         要求：子查询的结果必须为单列
               单行子查询
               多行子查询
4、exists后面：
         要求：子查询结果必须为单列（相关子查询）
         
特点：
      1.子查询放在条件中，要求必须放在条件右侧
      2.子查询一般放在小括号中
      3.子查询的执行优先于主查询 主查询条件用到了子查询结果
      4.单行子查询对应了 单行操作符：> < >= <= = <>
        多行子查询对应了 多行操作符：any/some all in
*/

#一、where或having后面
#1、标量子查询（单行子查询）
#案例1：谁的工资比Abel高？
#①.查询Abel的工资
SELECT salary
FROM employees
WHERE last_name='Abel'
#②.查询工资比①高的人名
SELECT last_name,salary
FROM employees
WHERE salary>(
SELECT salary
FROM employees
WHERE last_name='Abel'
);

#案例2：返回job_id与141号员工相同，salary比143号员工多的员工 姓名，job_id和工资
SELECT last_name,job_id,salary
FROM employees 
WHERE job_id=(
SELECT job_id
FROM employees
WHERE employee_id=141)
AND salary>(
SELECT salary
FROM employees
WHERE employee_id=143
);
#可以通过and连接多个标量子查询

#案例3：返回公司工资最少的员工的last_name，job_id和salary
SELECT last_name,job_id,salary
FROM employees
WHERE salary=(
SELECT MIN(salary)
FROM employees);

#案例4：查询最低工资大于50号部门最低工资的部门id和其最低工资
SELECT department_id,MIN(salary)
FROM employees
GROUP BY department_id
HAVING MIN(salary)>(
SELECT MIN(salary)
FROM employees
WHERE department_id=50);
#配合group by和having使用

#非法使用标量子查询：子查询结果并非一行一列，而是多行，或null，或多行多列

#2、列子查询（多行子查询）
IN/NOT IN 等于列表中的任意一个 最常用
ANY|SOME  和子查询返回的某一个值比较，但常常可以用别的函数代替
ALL       和子查询返回的所有值比较
#IN 和 = ANY等价
#案例1：返回location_id是1400或1700的部门中的所有员工姓名
SELECT last_name
FROM employees
WHERE department_id IN(
SELECT department_id
FROM departments
WHERE location_id IN(1400,1700));

#案例2：返回其它部门中比job_id为‘IT_PROG’部门任一工资低的员工的：工号、job_id以及salary
SELECT employee_id,job_id,salary
FROM employees e
JOIN departments d
ON e.`department_id`=d.`department_id`
WHERE d.department_name NOT IN(
SELECT department_name
FROM employees e
JOIN departments d
ON e.`department_id`=d.`department_id`
WHERE job_id='IT_PROG')
AND salary<ANY(
SELECT salary
FROM employees
WHERE job_id='IT_PROG');

#3、行子查询（结果一行多列或多列多行，一般用的比较少）
#案例1：查询工资最高且员工编号最小的员工信息
SELECT *
FROM employees
WHERE (employee_id,salary)=(
SELECT MIN(employee_id),MAX(salary)
FROM employees);

#二、select后面（仅仅支持标量子查询）
#案例1：查询每个部门的员工个数
SELECT d.department_id,COUNT(*)
FROM employees e
JOIN departments d
ON e.`department_id`=d.`department_id`
GROUP BY d.department_id;

SELECT d.*,(
SELECT COUNT(*)
FROM employees e
WHERE e.`department_id`=d.`department_id`
) 个数
FROM departments d;

#案例2：查询员工号=102的部门名
SELECT department_name
FROM departments
WHERE department_id=(
SELECT department_id
FROM employees
WHERE employee_id=102);

SELECT (
SELECT department_name
FROM departments d
INNER JOIN employees e
ON d.department_id=e.department_id
WHERE e.employee_id=102) ;

#三、from后面!!!
/*
将查询结果充当一张表，要求必须起别名
*/
#案例1：查询每个部门的平均工资的工资等级
#①查询每个部门的平均工资
SELECT AVG(salary),department_id
FROM employees
GROUP BY department_id;
#②连接①的结果集和job_grade表，筛选条件平均工资 between lowest_sal AND highest_sal
SELECT *
FROM (SELECT AVG(salary) sal,department_id dpt
FROM employees
GROUP BY department_id
) a
JOIN job_grades j
ON a.sal BETWEEN j.lowest_sal AND j.highest_sal;

#四、exists后面（相关子查询 先执行外查询 再执行内查询）
#能用exists的地方一定可以用in
 /*
语法：
exists（完整的查询语句）
结果：
1或者0
*/
#案例1：查询有员工的部门名
SELECT
  department_name
FROM
  departments d
WHERE EXISTS
  (SELECT
    *
  FROM
    employees e
  WHERE d.`department_id` = e.`department_id`);
  
#显然也可以用in，语义性更强
SELECT
  department_name
FROM
  departments
WHERE department_id IN 
  (SELECT
    department_id
  FROM
    employees e
  GROUP BY department_id); 
#【group by】可用可不用 

#案例2：查询没有女朋友的男神信息
USE girls;
SELECT *
FROM boys bo
WHERE NOT EXISTS(
SELECT boyfriend_id
FROM beauty be
WHERE bo.`id`=be.`boyfriend_id`);

SELECT bo.*
FROM boys bo
WHERE bo.id NOT IN(
SELECT boyfriend_id
FROM beauty);

#子查询练习
#案例1：查询和zlotkey相同部门的员工姓名和工资
 #1.查询zlotkey的部门编号
 SELECT department_id
 FROM employees
 WHERE last_name='zlotkey'
 #2.查询department_id=1中的员工姓名和工资
 SELECT last_name,salary
 FROM employees
 WHERE department_id=(
  SELECT department_id
 FROM employees
 WHERE last_name='zlotkey');
 
 #案例2：查询工资比公司平均给工资高的员工号，姓名和工资
 SELECT employee_id,last_name,salary
 FROM employees
 WHERE salary>(
 SELECT AVG(salary)
 FROM employees
 );
 
 #案例3：查询各部门中工资比本部门平均工资高的员工的员工号、姓名和工资
 ---------本题比较难-------------注意需要起多个别名 否则容易产生歧义----------
 SELECT e.`department_id`,employee_id,last_name,salary
 FROM 
 (SELECT AVG(salary) av,department_id
 FROM employees
 GROUP BY department_id) ad
 JOIN employees e
 ON e.department_id=ad.department_id
 WHERE e.salary>ad.av;
 
 #案例4：查询和姓名中包含字母u的员工在相同部门的员工的员工号和姓名
 SELECT employee_id,last_name
 FROM employees
 WHERE department_id IN
 (SELECT DISTINCT department_id
 FROM employees
 WHERE last_name LIKE '%u%');
 
 #案例5：查询在部门的location_id为1700的部门工作的员工的员工号
 SELECT employee_id
 FROM employees
 WHERE department_id IN(
 SELECT department_id
 FROM departments
 WHERE location_id=1700);
 
 #案例6：查询管理者是K_ing的员工姓名和工资
SELECT last_name,salary
FROM employees
WHERE manager_id IN(
SELECT employee_id
FROM employees
WHERE last_name = 'K_ing'
AND employee_id IN(SELECT manager_id FROM employees));

SELECT last_name,salary
FROM employees
WHERE manager_id IN(
SELECT employee_id
FROM employees
WHERE last_name = 'K_ing'
GROUP BY manager_id);

#案例7：查询工资最高的员工的姓名，要求first_name和last_name显示为一列，列名为姓，名
SELECT CONCAT(first_name, last_name) AS "姓，名"
FROM employees
WHERE salary>= ALL(SELECT salary FROM employees);
